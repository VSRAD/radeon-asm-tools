<UserControl x:Class="VSRAD.Package.DebugVisualizer.VisualizerHeaderControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:VSRAD.Package.DebugVisualizer"
             xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:wavemap="clr-namespace:VSRAD.Package.DebugVisualizer.Wavemap"
             xmlns:utils="clr-namespace:VSRAD.Package.Utils"
             mc:Ignorable="d"
             x:Name="Root"
             d:DesignHeight="140" d:DesignWidth="720">
    <UserControl.ContextMenu>
        <ContextMenu>
            <MenuItem Header="Show hidden system variable" IsChecked="{Binding Options.VisualizerOptions.ShowSystemVariable, Mode=TwoWay}" IsCheckable="True"/>
            <MenuItem Header="Manual override dispatch" IsChecked="{Binding Options.VisualizerOptions.ManualMode, Mode=TwoWay}" IsCheckable="True"/>
            <MenuItem Header="3D NDRange" IsChecked="{Binding Options.VisualizerOptions.NDRange3D, Mode=TwoWay}" IsCheckable="True"/>
            <MenuItem IsEnabled="False" Header="Show:"/>
            <MenuItem Header="Columns" IsChecked="{Binding Options.VisualizerOptions.ShowColumnsField, Mode=TwoWay}" IsCheckable="True"/>
            <MenuItem Header="App args" IsChecked="{Binding Options.VisualizerOptions.ShowAppArgsField, Mode=TwoWay}" IsCheckable="True"/>
            <MenuItem Header="Break args" IsChecked="{Binding Options.VisualizerOptions.ShowBreakArgsField, Mode=TwoWay}" IsCheckable="True"/>
            <MenuItem Header="Wavemap" IsChecked="{Binding Options.VisualizerOptions.ShowWavemap, Mode=TwoWay}" IsCheckable="True"/>
        </ContextMenu>
    </UserControl.ContextMenu>
    <UserControl.Resources>
        <ResourceDictionary>
            <BooleanToVisibilityConverter x:Key="BoolToVisibility" />
            <utils:WpfBoolToStringConverter x:Key="PinnedButtonRotConverter" TrueValue="-45" FalseValue="0" />
            <utils:WpfBoolToStringConverter x:Key="PinnedButtonTrXConverter" TrueValue="-3" FalseValue="0" />
            <utils:WpfBoolToStringConverter x:Key="PinnedButtonTrYConverter" TrueValue="7" FalseValue="0" />
            <Style x:Key="NDRangeInput" TargetType="local:NumberInput">
                <Setter Property="IsEnabled" Value="{Binding GroupIndexEditable}"/>
                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="true">
                        <Setter Property="ToolTip" Value="{Binding Path=(Validation.Errors)/ErrorContent, RelativeSource={RelativeSource Self}}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="NDRange3DInput" TargetType="local:NumberInput" BasedOn="{StaticResource NDRangeInput}">
                <Setter Property="Visibility" Value="{Binding Options.VisualizerOptions.NDRange3D, Converter={StaticResource BoolToVisibility}}"/>
            </Style>
            <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Border x:Name="Border"
                            CornerRadius="0"
                            Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
                            BorderBrush="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBorderKey}}"
                            BorderThickness="1" />
                    <Path x:Name="Arrow"
                          Grid.Column="0"
                          Fill="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
                          HorizontalAlignment="Center"
                          VerticalAlignment="Center"
                          Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z"/>
                </Grid>
            </ControlTemplate>

            <ControlTemplate TargetType="{x:Type ComboBoxItem}" x:Key="ComboBoxItemTemplate">
                <StackPanel Orientation="Horizontal" x:Name="SP"
                                Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}">
                    <Button Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}" x:Name="PinButton"
                            Width="22" Height="22"
                            Command="{Binding PinnedButtonCommand, ElementName=Root}" CommandParameter="{Binding}"
                            Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
                            RenderTransformOrigin="0.5 0.5" BorderThickness="0">
                        <Button.Content>
                            <TextBlock>
                                📌
                                <TextBlock.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform Angle="{Binding Pinned, Converter={StaticResource PinnedButtonRotConverter}}"/>
                                        <TranslateTransform X="{Binding Pinned, Converter={StaticResource PinnedButtonTrXConverter}}"
                                                            Y="{Binding Pinned, Converter={StaticResource PinnedButtonTrYConverter}}"/>
                                    </TransformGroup>
                                </TextBlock.RenderTransform>
                            </TextBlock>
                        </Button.Content>
                    </Button>
                    <Label  Content="{Binding Value}" x:Name="CL" Padding="4,2" VerticalContentAlignment="Center"
                            Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
                            Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
                            BorderBrush="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBorderKey}}"/>
                </StackPanel>
                <ControlTemplate.Triggers>
                    <Trigger SourceName="PinButton" Property="IsMouseOver" Value="True">
                        <Setter TargetName="PinButton" Property="Foreground" Value="Black"/>
                        <Setter TargetName="PinButton" Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowButtonHoverActiveKey}}"/>
                    </Trigger>
                    <Trigger Property="IsHighlighted" Value="True">
                        <Setter TargetName="SP" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter TargetName="CL" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
                <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
            </ControlTemplate>

            <SolidColorBrush x:Key="ComboBoxMouseOverBorderKey" Color="#FF7EB4EA"/>
            <SolidColorBrush x:Key="ComboBoxFocusedBorderKey" Color="#FF569DE5"/>

            <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
                <Setter Property="SnapsToDevicePixels" Value="true"/>
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
                <Setter Property="MinWidth" Value="120"/>
                <Setter Property="MinHeight" Value="20"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ComboBox}">
                            <Border BorderBrush="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBorderKey}}" BorderThickness="1" x:Name="Brd">
                                <Grid x:Name="ComboGrid">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="22"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <ToggleButton Name="ToggleButton"
                                                  Template="{StaticResource ComboBoxToggleButton}"
                                                  Height="24"
                                                  Grid.Column="0"
                                                  Margin="-1,-1,0,-1"
                                                  Width="Auto"
                                                  Focusable="false"
                                                  IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                                  ClickMode="Press" Click="DropdownStateChanged"/>
                                    <ContentPresenter Name="ContentSite" IsHitTestVisible="True"  Content="{TemplateBinding SelectionBoxItem}"
                                                      ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                                      Margin="0"
                                                      VerticalAlignment="Center"
                                                      HorizontalAlignment="Left"/>
                                    <TextBox x:Name="PART_EditableTextBox"
                                             Template="{StaticResource ComboBoxTextBox}"
                                             HorizontalAlignment="Stretch"
                                             VerticalAlignment="Center"
                                             VerticalContentAlignment="Center"
                                             Grid.Column="1"
                                             Margin="0,0,0,0"
                                             Focusable="True"
                                             Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
                                             Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
                                             IsReadOnly="{TemplateBinding IsReadOnly}"/>
                                    <Popup Name="Popup"
                                           Placement="Bottom"
                                           IsOpen="{TemplateBinding IsDropDownOpen}"
                                           AllowsTransparency="True"
                                           Focusable="False"
                                           PopupAnimation="Slide">
                                        <Grid Name="DropDown"
                                              SnapsToDevicePixels="True"
                                              MinWidth="{TemplateBinding ActualWidth}"
                                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                            <Border x:Name="DropDownBorder"
                                                    Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
                                                    BorderThickness="1"
                                                    BorderBrush="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBorderKey}}"/>
                                            <ScrollViewer Margin="2,4" SnapsToDevicePixels="True">
                                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                            </ScrollViewer>
                                        </Grid>
                                    </Popup>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="HasItems" Value="false">
                                    <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                                </Trigger>
                                <Trigger Property="IsGrouping" Value="true">
                                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                                </Trigger>
                                <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                                    <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                                    <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                                </Trigger>
                                <Trigger Property="IsEditable"  Value="true">
                                    <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true" SourceName="ComboGrid">
                                    <Setter TargetName="Brd" Property="BorderBrush" Value="{StaticResource ComboBoxMouseOverBorderKey}"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="true" SourceName="PART_EditableTextBox">
                                    <Setter TargetName="Brd" Property="BorderBrush" Value="{StaticResource ComboBoxFocusedBorderKey}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                </Style.Triggers>
            </Style>
            <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
                <Setter Property="Template" Value="{StaticResource ComboBoxItemTemplate}"/>
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>
    <StackPanel>
        <StackPanel.Style>
            <Style TargetType="StackPanel">
                <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"/>
            </Style>
        </StackPanel.Style>
        <WrapPanel>
            <Label Content="Counter:" Height="26" Width="68" Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
            <local:NumberInput Value="{Binding Options.DebuggerOptions.Counter, UpdateSourceTrigger=PropertyChanged}"
                               Width="60" Height="24" />
            <StackPanel Orientation="Horizontal" Height="24">
                <CheckBox  Margin="6,0,6,0" Padding="-4,-1,0,0" IsChecked="{Binding Options.DebuggerOptions.StopOnHit}" VerticalContentAlignment="Center" UseLayoutRounding="False">
                    <Label Content="Stop on hit"/>
                </CheckBox>
            </StackPanel>
            <StackPanel Orientation="Horizontal">
                <Label Content="Group #:" Height="26" Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
                <local:NumberInput Value="{Binding GroupIndex.X, UpdateSourceTrigger=PropertyChanged}" Maximum="{Binding GroupIndex.MaximumX, Mode=TwoWay}"
                                   Width="38" Height="24" Margin="6,0,0,0" Style="{StaticResource NDRangeInput}"/>
                <local:NumberInput Value="{Binding GroupIndex.Y, UpdateSourceTrigger=PropertyChanged}" Maximum="{Binding GroupIndex.MaximumY, Mode=TwoWay}"
                                   Width="38" Height="24" Margin="6,0,0,0" Style="{StaticResource NDRange3DInput}"/>
                <local:NumberInput Value="{Binding GroupIndex.Z, UpdateSourceTrigger=PropertyChanged}" Maximum="{Binding GroupIndex.MaximumZ, Mode=TwoWay}"
                                   Width="38" Height="24" Margin="6,0,0,0" Style="{StaticResource NDRange3DInput}"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal" Visibility="{Binding Options.VisualizerOptions.ManualMode, Converter={StaticResource BoolToVisibility}}">
                <Label Content="Groups:" Height="26" Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
                       Visibility="{Binding Options.VisualizerOptions.NDRange3D, Converter={StaticResource BoolToVisibility}}"/>
                <local:NumberInput Value="{Binding GroupIndex.DimX, UpdateSourceTrigger=PropertyChanged}"
                                   Minimum="1" Width="38" Height="24" Margin="6,0,0,0" Style="{StaticResource NDRange3DInput}"/>
                <local:NumberInput Value="{Binding GroupIndex.DimY, UpdateSourceTrigger=PropertyChanged}"
                                   Minimum="1" Width="38" Height="24" Margin="6,0,0,0" Style="{StaticResource NDRange3DInput}"/>
                <local:NumberInput Value="{Binding GroupIndex.DimZ, UpdateSourceTrigger=PropertyChanged}"
                                   Minimum="1" Width="38" Height="24" Margin="6,0,0,0" Style="{StaticResource NDRange3DInput}"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal" Visibility="{Binding Options.VisualizerOptions.ManualMode, Converter={StaticResource BoolToVisibility}}">
                <Label Content="Group size:" Height="26" Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
                <local:NumberInput IsEnabled="{Binding GroupIndexEditable}" Value="{Binding Options.DebuggerOptions.GroupSize, UpdateSourceTrigger=PropertyChanged}"
                                   Minimum="1" Step="64" Width="38" Height="24"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal" Visibility="{Binding Options.VisualizerOptions.ManualMode, Converter={StaticResource BoolToVisibility}}">
                <Label Content="Wave size:" Height="26" Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
                <local:NumberInput IsEnabled="{Binding GroupIndexEditable}" Value="{Binding Options.DebuggerOptions.WaveSize, UpdateSourceTrigger=PropertyChanged}"
                                   Minimum="1" Step="32" Width="38" Height="24"/>
            </StackPanel>
            <!--
            <StackPanel Orientation="Horizontal">
                <Label Content="NGroups:" Height="26" Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
                <local:NumberInput Value="{Binding Options.DebuggerOptions.NGroups, UpdateSourceTrigger=PropertyChanged}"
                                   Minimum="0" Step="1" Width="38" Height="24"/>
            </StackPanel>
            -->
            <Label Content="{Binding Status, Mode=OneWay}" Height="26" Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
        </WrapPanel>
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="68"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition>
                    <RowDefinition.Style>
                        <Style TargetType="RowDefinition">
                            <Setter Property="Height" Value="Auto" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Options.VisualizerOptions.ShowColumnsField}" Value="False">
                                    <Setter Property="Height" Value="0" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </RowDefinition.Style>
                </RowDefinition>
                <RowDefinition>
                    <RowDefinition.Style>
                        <Style TargetType="RowDefinition">
                            <Setter Property="Height" Value="Auto" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Options.VisualizerOptions.ShowAppArgsField}" Value="False">
                                    <Setter Property="Height" Value="0" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </RowDefinition.Style>
                </RowDefinition>
                <RowDefinition>
                    <RowDefinition.Style>
                        <Style TargetType="RowDefinition">
                            <Setter Property="Height" Value="Auto" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Options.VisualizerOptions.ShowBreakArgsField}" Value="False">
                                    <Setter Property="Height" Value="0" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </RowDefinition.Style>
                </RowDefinition>
                <RowDefinition>
                    <RowDefinition.Style>
                        <Style TargetType="RowDefinition">
                            <Setter Property="Height" Value="*" />
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Options.VisualizerOptions.ShowWavemap}" Value="False">
                                    <Setter Property="Height" Value="0" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </RowDefinition.Style>
                </RowDefinition>
            </Grid.RowDefinitions>
            <Label Grid.Row="0" Grid.Column="0" Content="Columns:" Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
            <Label Grid.Row="1" Grid.Column="0" Content="App args:" Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
            <Label Grid.Row="2" Grid.Column="0" Content="Break args:" Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
            <TextBox Text="{Binding Options.VisualizerColumnStyling.VisibleColumns, UpdateSourceTrigger=PropertyChanged}"
                     Grid.Row="0" Grid.Column="1" Height="24" VerticalContentAlignment="Center"
                     Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
                     Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
                     BorderBrush="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBorderKey}}"/>
            <ComboBox Text="{Binding Options.DebuggerOptions.AppArgs, UpdateSourceTrigger=PropertyChanged}"
                      IsEditable="True" Grid.Column="1" Height="24" VerticalContentAlignment="Center"
                      ItemsSource="{Binding Options.DebuggerOptions.LastAppArgs, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}"
                      DisplayMemberPath="Value" x:Name="LastAppArgsCombo" Grid.Row="1" IsTextSearchEnabled="False"/>
            <TextBox Text="{Binding Options.DebuggerOptions.BreakArgs, UpdateSourceTrigger=PropertyChanged}"
                     Grid.Row="2" Grid.Column="1" Height="24" VerticalContentAlignment="Center"
                     Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
                     Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"
                     BorderBrush="{DynamicResource {x:Static vsshell:VsBrushes.ToolWindowBorderKey}}"/>
            <Grid Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" HorizontalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="85"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <wavemap:WavemapOffsetInput HorizontalAlignment="Stretch" VerticalAlignment="Center" x:Name="WavemapSelector"
                                            Grid.Column="0" Grid.Row="0" Margin="5,5,5,5"/>
                <Border Grid.Column="1" Grid.Row="0" HorizontalAlignment="Stretch" BorderBrush="{x:Null}" Margin="4">
                    <Image x:Name="WavemapImage" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0" Stretch="None"/>
                </Border>
            </Grid>
        </Grid>
    </StackPanel>
</UserControl>
